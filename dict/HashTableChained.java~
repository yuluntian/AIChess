/* HashTableChained.java */

package player.dict;
import player.list.*;;

/**
 *  HashTableChained implements a Dictionary as a hash table with chaining.
 *  All objects used as keys must have a valid hashCode() method, which is
 *  used to determine which bucket of the hash table an entry is stored in.
 *  Each object's hashCode() is presumed to return an int between
 *  Integer.MIN_VALUE and Integer.MAX_VALUE.  The HashTableChained class
 *  implements only the compression function, which maps the hash code to
 *  a bucket in the table's range.
 *
 **/

public class HashTableChained implements Dictionary {

  /**
   *  The size field stores the total number of entries currently in the hash table.
   *  The hashtable field stores the list object used to reprensent the hash table.
   **/
  private int size;
  private SList[] hashtable;



  /** 
   *  Construct a new empty hash table intended to hold roughly sizeEstimate
   *  entries.  (The precise number of buckets is up to you, but we recommend
   *  you use a prime number, and shoot for a load factor between 0.5 and 1.)
   **/

  public HashTableChained(int sizeEstimate) {
    hashtable = new SList[assignPrime(sizeEstimate)];
    makeEmpty();
  }

  //Returns a prime number close to n.
  private int assignPrime(int n){
    n = (int) (n/0.8);
    while(checkPrime(n) == false){
      n = n + 1;
    }
    return n;
  }

  //Checks if the input n is a prime number.
  private boolean checkPrime(int n){
    for(int i = 2; i <= Math.sqrt(n); i++){
      if(n % i == 0) return false;
    }
    return true;
  }
  //Returns the number of buckets of "this" hash table.
  public int buckets(){
    return hashtable.length;
  }

  /** 
   *  Construct a new empty hash table with a default size.  Say, a prime in
   *  the neighborhood of 100.
   **/

  public HashTableChained() {
    hashtable = new SList[101];
    makeEmpty();
  }

  /**
   *  Converts a hash code in the range Integer.MIN_VALUE...Integer.MAX_VALUE
   *  to a value in the range 0...(size of hash table) - 1.
   *
   *  This function should have package protection (so we can test it), and
   *  should be used by insert, find, and remove.
   **/

  int compFunction(int code) {
    int result;
    code = (127 * code + 53) % 16908799;
    result = code % buckets();
    if (result < 0) result += buckets();
    return result;
  }

  /** 
   *  Returns the number of entries stored in the dictionary.  Entries with
   *  the same key (or even the same key and value) each still count as
   *  a separate entry.
   *  @return number of entries in the dictionary.
   **/

  public int size() {
    // Replace the following line with your solution.
    return size;
  }

  /** 
   *  Tests if the dictionary is empty.
   *
   *  @return true if the dictionary has no entries; false otherwise.
   **/

  public boolean isEmpty() {
    // Replace the following line with your solution.
    return size == 0;
  }

  /**
   *  Create a new Entry object referencing the input key and associated value,
   *  and insert the entry into the dictionary.  Return a reference to the new
   *  entry.  Multiple entries with the same key (or even the same key and
   *  value) can coexist in the dictionary.
   *
   *  This method should run in O(1) time if the number of collisions is small.
   *
   *  @param key the key by which the entry can be retrieved.
   *  @param value an arbitrary object.
   *  @return an entry containing the key and value.
   **/

  public Entry insert(Object key, Object value) {
    DictEntry e = new DictEntry(key, value);
    int location = compFunction(key.hashCode());
    hashtable[location].insertFront(e);
    size++;
    return e;
  }


  /** 
   *  Search for the SListNode that contains the entry with the specified key.  If such a SListNode is found,
   *  return it; otherwise return null.  If several entries have the specified
   *  key, choose one arbitrarily and return it.
   *
   *  This method should run in O(1) time if the number of collisions is small.
   *
   *  @param key the search key.
   *  @return an SListNode containing the entry with the specified key and the associated value, or null if
   *          no SListNode is found.
   **/
  private SListNode findNode(Object key){
    int location = compFunction(key.hashCode());
    SList bucket = hashtable[location];
    SListNode node = bucket.front();
    DictEntry e = null;
    while(node != null){
      e = (DictEntry)(node.item());
      if(e.key.equals(key)){
        return node;
      }
      node = node.next();
    }
    return null;

  }

  /** 
   *  Search for an entry with the specified key.  If such an entry is found,
   *  return it; otherwise return null.  If several entries have the specified
   *  key, choose one arbitrarily and return it.
   *
   *  This method should run in O(1) time if the number of collisions is small.
   *
   *  @param key the search key.
   *  @return an entry containing the key and an associated value, or null if
   *          no entry contains the specified key.
   **/
  public Entry find(Object key) {
    SListNode node = findNode(key);
    if(node != null) return (DictEntry) node.item();
    else{
      return null;
    }
  }

  /** 
   *  Remove an entry with the specified key.  If such an entry is found,
   *  remove it from the table and return it; otherwise return null.
   *  If several entries have the specified key, choose one arbitrarily, then
   *  remove and return it.
   *
   *  This method should run in O(1) time if the number of collisions is small.
   *
   *  @param key the search key.
   *  @return an entry containing the key and an associated value, or null if
   *          no entry contains the specified key.
   */

  public Entry remove(Object key) {
    SListNode node = findNode(key);
    DictEntry e = null;
    if(node != null){
      e = (DictEntry) node.item();
      SList bucket = hashtable[compFunction(key.hashCode())];
      bucket.remove(node);
      size--;
    }
    return e;
  }

  /**
   *  Remove all entries from the dictionary.
   */
  public void makeEmpty() {
    for(int i = 0; i < buckets(); i++){
      hashtable[i] = new SList();
    }
    size = 0;
  }

  //Returns the expected number of collisions of "this" hash table.
  public double expectedCollisions(){
    double i = size;
    double b = buckets();
    return i - b + b * Math.pow(1 - 1/b, i);
  }
  
  //Returns the actual number of collisions of "this" hash table.
  public int collisions(){
    int collisions = 0;
    for(int i = 0; i < buckets(); i++){
      if(hashtable[i].size() > 1){
        collisions += hashtable[i].size() - 1;
      }
    }
    return collisions;
  }

}
